
#################################################################
# TOTAL GRADE EXERCISE 2: 45/50p
#################################################################

#The simulation is performed correctly ---> 35p
#Regarding the questions, You didn't explored what happend in different tempoeral intervals, ---> 10/15 p
#and you mix some conceps, the bottom plot does not show the variation of the harmonics respect to the time.
#################################################################



% DigiPen Bilbao
%
% PHY250 Spring 2021
%
% Asier Azpiri Iriarte
% asier.azpiri@digipen.edu
% 12/17/2021
%
%===============================================================================
function SoundViolin
  close
  #Read the audio
  [s fs] = audioread('E:\\Digipen\\PHY250\\2021\\Final_project\\submissions\Asier Iriarte Azpiri_396440_assignsubmission_file_\\Violin.wav');4
  #Normalize the signal
  s = s/max(abs(s));
  #Get the spectrum
  trans = abs(fft(s));
  L = length(trans);
  spectrum = trans(1:L/2);
  
  #Normalize the spectrum
  Ls = length(spectrum);
  spectrum = spectrum/max(spectrum);
  #Compute the frequencies
  frequencies = fs*(1:(L/2))/L;
  Lf = length(frequencies);

  #Get the harmonics
  n = length(s);
  #Compute time and period
  t = n/fs;
  Ts = 1/fs;
  time = [0:Ts:(t-Ts)];
  Lt = length(time);
  
  #Plot the signal along the time
  subplot(2,1,1);
  axis([0.4,0.5,-0.5,0.5]);
  xlabel('Time(s)');
  ylabel('Amplitude');
  hold on;
  plot(time,s);
  
  #Plot the amplitudes of each harmonic
  subplot(2,1,2);
  axis([0,2500,0,1]);
  xlabel('Frequencies(HZ)');
  ylabel('Amplitude');
  hold on
  plot(frequencies,spectrum);
  #INSTRUCTOR: and the plot of the harmonics of your model?
  
  #Get the peak amplitudes of each harmonic by hand
  Amplitude = linspace(0,0,8);
  Amplitude(1) = 0.4; 
  Amplitude(2) = 1.0;
  Amplitude(3) = 0.7;
  Amplitude(4) = 0.35;
  Amplitude(5) = 0.3;
  Amplitude(6) = 0.25;
  Amplitude(7) = 0.1;
  Amplitude(8) = 0.2;
  
  #Compute omega with the fundamental harmonic of the instrument
  Omega = linspace(0,0,8);
  for i = 1:8
    Omega(i) = i * 2 * pi * 195.0;
  endfor
  
  #Compute the artificial signal by summing the following formula
  Signal = linspace(0,0,Lt);
  for i = 1:Lt
    for j = 1:8
      Signal(i) += Amplitude(j)*cos(Omega(j)*time(i)); #INSTRUCTOR: if you define the time vector using linspace at the beginin, it is not necesarry to perform a double loop here, and the rendering time lowers considerably.
    endfor
  endfor
  
  #Divide it by constant to equalize it with source signal
  Signal = Signal/25.0;
  
  #Plot aritificial signal and compare both of them
  subplot(2,1,1);
  plot(time,Signal);
  
  #This function plots a naive shape of the sound wave according to 
  #The harmonic frequencies of the source, but there are some facts we
  #are missing in this function. 
  
  #The first one is that we don't take time into account. 
  #We can appreciate in the second subplot that the amplitude decreases ----> you are mixing concepts here...the second plot does not invole time.
  #in further harmonics, which modifies the signal shape along time.
  #However, this isn't applied here, so our signal shape will be constant over time.
  
  #The second one is that we only take the peak amplitudes in each harmonic.
  #Whenever we get close to an harmonic frequency, we can appreciate there are
  #Other frequencies around it. Those frequencies can be interpreted as the residual
  #Noise the source generates while it is producing sound (in this case, the arc of the violin)
  #Making contact with a string). So, if we take into account this noise, our shape will be more precise.
  
  #The third one is that we don't take into account the resonance box of the instrument.
  #In the first subplot, there are some destructive interferences between our signal and the original one
  #This happens since the resonance box reflects the sound waves generated by the source,
  #Which helps to control the intensity of the sound produced of the source (since a vibrating string
  #By itself doesn't produce a loud sound).
  
  #So, in order to improve our artificial sound, we should add to our equation these three facts
  #The resonance box of the instrument, the time and the noise generated by the source.
    
endfunction
